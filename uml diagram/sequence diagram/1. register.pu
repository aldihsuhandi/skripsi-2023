@startuml register

'autonumber  1.1.1

actor User as u

' Box "front end"
participant "Home page" as home
participant "Register page" as register
participant "Activate page" as active
' end box

' Box "back end"
participant UserController as userc
participant DictionaryController as dicc

participant DictionarQueryProcessor as dicproc

participant UserRegisterProcessor as processor
participant EmailEncryptProcessor as emailencrypt

participant User as um
participant Content as cm
participant Otp as om

participant Dictionary as dm

participant EmailEncrypt as eem
' end box

database shumishumi as db

u -> home++: click register button
home -> register--++ : redirect to register page

register -> dicc++ : /dictionary/query
dicc -> dicproc++ : process()
dicproc -> dm++ : queryByType()
dm -> db++ : query()
return result
return result
return result

return JSON_RESPONSE

'autonumber inc a
u -> register : fillout register form
'autonumber inc a
u -> register : click submit button

register -> userc++ : /user/register
userc -> processor++ : process()
processor -> processor : validate()
create um
processor -> um++ : new()
um -> db++ : save()
return result
return result

processor -> cm++ : queryOtpEmailTemplate()
cm -> db++ : queryOtpEmailTemplate()
return template otp email
return template otp email

create om
processor -> om++ : new()
om -> db++ : save()
return result
return result

processor -> processor : composeOtpEmail()

loop if send email process not success
processor -> processor : sendOtpEmail()
processor --> u : send otp email
end

return result
return JSON_RESPONSE

register -> userc++ : /user/email/encrypt
userc -> emailencrypt++ : process()

create eem
emailencrypt -> eem++ : new()
eem -> db : save()
return result
return result

return JSON_RESPONSE

register -> active--++ : redirect to activate page\nwith encrypted email

@enduml